
pragma solidity ^0.6.0;

import "@openzeppelin/contracts/access/AccessControl.sol";
import "@openzeppelin/contracts/GSN/Context.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "@openzeppelin/contracts/token/ERC721/ERC721.sol";

/**
 * @dev {ERC721} token, including:
 *
 *  - a minter role that allows for token minting (creation)
 *  - token ID and URI autogeneration
 *
 * This contract uses {AccessControl} to lock permissioned functions using the
 * different roles - head to its documentation for details.
 *
 * The account that deploys the contract will be granted the minter
 * role, as well as the default admin role, which will let it grant minter
 * roles to other accounts.
 *
 *
 */
contract STARNFT6 is Context, AccessControl, ERC721 {
    using Counters for Counters.Counter;

    bytes32 public constant MINTER_ROLE = keccak256("MINTER_ROLE");

    Counters.Counter private _tokenIdTracker;

    mapping (uint256 => uint256) private _tokenData;

    /**
     * @dev Grants `DEFAULT_ADMIN_ROLE` and `MINTER_ROLE` to the
     * account that deploys the contract.
     *
     * Token URIs will be autogenerated based on `baseURI` and their token IDs.
     * See {ERC721-tokenURI}.
     */
    constructor(string memory tokenName, string memory symbol) public ERC721(tokenName, symbol) {
        _setBaseURI("ipfs://");
    }

    /**
     * @dev Creates a new token for `to`. Its token ID will be automatically
     * assigned (and available on the emitted {IERC721-Transfer} event), and the token
     * URI autogenerated based on the base URI passed at construction.
     *
     * See {ERC721-_mint}.
     *
     * Requirements:
     *
     * - the caller must have the `MINTER_ROLE`.
     */
    function mintToken(address to, uint256 tokenData) public virtual {
//        require(hasRole(MINTER_ROLE, _msgSender()), "My STARNFT6: must have minter role to mint");

        _mint(to, _tokenIdTracker.current());
        _tokenData[_tokenIdTracker.current()] = tokenData;
        _tokenIdTracker.increment();
    }

    function tokenData(uint256 tokenId) public view returns (uint256) {
        require(_exists(tokenId), "MyNFT: URI query for nonexistent token");

        return _tokenData[tokenId];
    }
}
